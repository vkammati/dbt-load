name: "CI Unit Test and SonarQube code_quality"

on:
  pull_request:
    branches:
      - main
      - uat
  workflow_call:
    inputs:
        workflow:
            default: "CI unit-test and SonarQube workflow is called"
            description: "calling unit-test and SonarQube workflow"
            required: false
            type: string

jobs:
  ci_unit_test:
    name: Tests with pytest
    uses: sede-x/HyperAutomation-ChangeManagement/.github/workflows/unit-test-gate-python.yaml@0.6.1
    with:
        use-pytest: true
        python-version: "3.11.x"
        python-requirements: "requirements.txt"
        test-args: "--pyargs utils edp_dbt_runner --ignore=conftest.py --ignore=setup.py -s"
    secrets:
        # ! Threshold of coverage percentage which will be used to determine if the CI is successful or not!
        # ! This won't take a place as for Shell Sonar way touchless locked it to minimum 80%, it's required tho.
        TEST_COVERAGE: "10"

  ci_sonarqube_code_quality:
    runs-on: ubuntu-latest
    needs: ci_unit_test
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - name: Get branch name and coverage path
        id: branch_repo_names_coverage_path
        run: |
            if [[ ${{ github.ref }} == refs/heads/* ]]; then
                echo "branch=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
            else
                echo "branch=main" >> $GITHUB_OUTPUT
            fi
            repo_name=$(echo ${{ github.repository }} | cut -d'/' -f2)
            echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
            echo "coverage_path=$GITHUB_WORKSPACE/coverage/coverage.xml" >> $GITHUB_OUTPUT
      - name: SonarQube Quality Gate
        uses: sede-x/HyperAutomation-ChangeManagement/.github/actions/sonarqube-gate@0.6.1
        with:
            args-branch: ${{ steps.branch_repo_names_coverage_path.outputs.branch }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            sonar-unittest-args: >
                -Dsonar.projectKey=com.shell.${{ steps.branch_repo_names_coverage_path.outputs.repo_name }}
                -Dsonar.projectName=${{ steps.branch_repo_names_coverage_path.outputs.repo_name }}
                -Dsonar.token=${{ secrets.SONAR_TOKEN }}
                -Dsonar.sonar.host.url="https://sesvc.shell.com/"
                -Dsonar.python.coverage.reportPaths=${{ steps.branch_repo_names_coverage_path.outputs.coverage_path }}
